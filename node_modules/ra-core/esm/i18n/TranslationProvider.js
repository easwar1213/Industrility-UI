var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React, { Children, Component } from 'react';
import Polyglot from 'node-polyglot';
import { connect } from 'react-redux';
import defaultMessages from 'ra-language-english';
import defaultsDeep from 'lodash/defaultsDeep';
import { TranslationContext, } from './TranslationContext';
/**
 * Creates a translation context, available to its children
 *
 * Must be called withing a Redux app.
 *
 * @example
 *     const MyApp = () => (
 *         <Provider store={store}>
 *             <TranslationProvider locale="fr" messages={messages}>
 *                 <!-- Child components go here -->
 *             </TranslationProvider>
 *         </Provider>
 *     );
 */
var TranslationProviderView = /** @class */ (function (_super) {
    __extends(TranslationProviderView, _super);
    function TranslationProviderView() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.polyglot = undefined;
        _this.state = {
            contextValues: {
                locale: 'en',
                translate: function (id) { return id; },
            },
        };
        _this.setUpContextValues = function () {
            var _a = _this.props, locale = _a.locale, messages = _a.messages;
            var polyglot = new Polyglot({
                locale: locale,
                phrases: defaultsDeep({}, messages, defaultMessages),
            });
            _this.setState({
                contextValues: {
                    locale: locale,
                    translate: polyglot.t.bind(polyglot),
                },
            });
        };
        return _this;
    }
    TranslationProviderView.prototype.componentDidMount = function () {
        this.setUpContextValues();
    };
    TranslationProviderView.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.locale !== this.props.locale) {
            this.setUpContextValues();
        }
    };
    TranslationProviderView.prototype.render = function () {
        var children = this.props.children;
        var contextValues = this.state.contextValues;
        return (React.createElement(TranslationContext.Provider, { value: contextValues }, Children.only(children)));
    };
    return TranslationProviderView;
}(Component));
var mapStateToProps = function (state) { return ({
    locale: state.i18n.locale,
    messages: state.i18n.messages,
}); };
var TranslationProvider = connect(mapStateToProps)(TranslationProviderView);
export default TranslationProvider;
